#!/usr/bin/env python
"""
Script de d√©ploiement automatique sur Vercel
"""

import os
import subprocess
import sys
import json
from pathlib import Path

def run_command(command, description):
    """Ex√©cute une commande et g√®re les erreurs"""
    print(f"üîß {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Succ√®s")
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Erreur")
        print(f"Commande : {command}")
        print(f"Erreur : {e.stderr}")
        return None

def check_prerequisites():
    """V√©rifie les pr√©requis"""
    print("üîç V√©rification des pr√©requis...")
    
    # V√©rifier Python
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ requis")
        return False
    
    # V√©rifier pip
    if not run_command("pip --version", "V√©rification de pip"):
        return False
    
    # V√©rifier git
    if not run_command("git --version", "V√©rification de git"):
        return False
    
    # V√©rifier Node.js (pour Vercel CLI)
    if not run_command("node --version", "V√©rification de Node.js"):
        print("‚ö†Ô∏è  Node.js requis pour Vercel CLI")
        return False
    
    # V√©rifier npm
    if not run_command("npm --version", "V√©rification de npm"):
        return False
    
    print("‚úÖ Tous les pr√©requis sont satisfaits")
    return True

def install_dependencies():
    """Installe les d√©pendances Vercel"""
    print("üì¶ Installation des d√©pendances...")
    
    # Installer les d√©pendances Python
    if not run_command("pip install -r requirements-vercel.txt", "Installation des d√©pendances Python"):
        return False
    
    # Installer Vercel CLI globalement
    if not run_command("npm install -g vercel", "Installation de Vercel CLI"):
        return False
    
    return True

def test_vercel_app():
    """Teste l'application Vercel localement"""
    print("üß™ Test de l'application Vercel...")
    
    # V√©rifier que vercel_app.py existe
    if not Path("vercel_app.py").exists():
        print("‚ùå vercel_app.py non trouv√©")
        return False
    
    # Test simple d'import
    try:
        import vercel_app
        print("‚úÖ Import de vercel_app.py r√©ussi")
        return True
    except Exception as e:
        print(f"‚ùå Erreur d'import : {e}")
        return False

def deploy_to_vercel():
    """D√©ploie sur Vercel"""
    print("üöÄ D√©ploiement sur Vercel...")
    
    # V√©rifier si d√©j√† connect√©
    if not run_command("vercel whoami", "V√©rification de la connexion Vercel"):
        print("üîê Connexion √† Vercel requise...")
        if not run_command("vercel login", "Connexion √† Vercel"):
            return False
    
    # D√©ployer
    print("üì§ D√©ploiement en cours...")
    deploy_result = run_command("vercel --yes", "D√©ploiement sur Vercel")
    
    if deploy_result:
        print("‚úÖ D√©ploiement r√©ussi !")
        # Extraire l'URL du d√©ploiement
        if "Preview:" in deploy_result:
            url = deploy_result.split("Preview:")[1].split()[0]
            print(f"üåê URL de pr√©visualisation : {url}")
        if "Production:" in deploy_result:
            url = deploy_result.split("Production:")[1].split()[0]
            print(f"üåê URL de production : {url}")
        return True
    else:
        print("‚ùå D√©ploiement √©chou√©")
        return False

def create_deployment_summary():
    """Cr√©e un r√©sum√© du d√©ploiement"""
    summary = """
# üìã R√©sum√© du D√©ploiement Vercel

## ‚úÖ √âtapes accomplies
- [x] V√©rification des pr√©requis
- [x] Installation des d√©pendances
- [x] Test de l'application
- [x] D√©ploiement sur Vercel

## üîó URLs importantes
- **Dashboard Vercel** : https://vercel.com/dashboard
- **Documentation** : https://vercel.com/docs

## üì± Test de l'API
```bash
# Test de sant√©
curl https://votre-projet.vercel.app/health

# Test du chatbot
curl -X POST https://votre-projet.vercel.app/chatbot/api/ \\
  -H "Content-Type: application/json" \\
  -d '{"message": "Bonjour"}'
```

## üö® Points d'attention
1. **Mod√®les IA** : Les fichiers .pkl sont trop volumineux pour Vercel
2. **Stockage** : Utilisez un stockage externe pour les mod√®les
3. **Variables d'environnement** : Configurez-les dans le dashboard Vercel

## üîÑ Mise √† jour
Pour red√©ployer apr√®s des modifications :
```bash
vercel --prod
```

## üìä Monitoring
- Surveillez les performances dans le dashboard Vercel
- V√©rifiez les logs d'erreur
- Testez r√©guli√®rement vos endpoints
"""
    
    with open("DEPLOYMENT_SUMMARY.md", "w", encoding="utf-8") as f:
        f.write(summary)
    
    print("üìù R√©sum√© du d√©ploiement cr√©√© : DEPLOYMENT_SUMMARY.md")

def main():
    """Fonction principale"""
    print("üöÄ SCRIPT DE D√âPLOIEMENT VERCEL")
    print("=" * 50)
    
    # V√©rifier les pr√©requis
    if not check_prerequisites():
        print("‚ùå Pr√©requis non satisfaits. Arr√™t du d√©ploiement.")
        sys.exit(1)
    
    # Installer les d√©pendances
    if not install_dependencies():
        print("‚ùå √âchec de l'installation des d√©pendances.")
        sys.exit(1)
    
    # Tester l'application
    if not test_vercel_app():
        print("‚ùå √âchec du test de l'application.")
        sys.exit(1)
    
    # D√©ployer
    if not deploy_to_vercel():
        print("‚ùå √âchec du d√©ploiement.")
        sys.exit(1)
    
    # Cr√©er le r√©sum√©
    create_deployment_summary()
    
    print("\n" + "=" * 50)
    print("üéâ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS !")
    print("=" * 50)
    print("\nüìö Consultez DEPLOYMENT_SUMMARY.md pour plus d'informations")
    print("üåê V√©rifiez votre dashboard Vercel pour l'URL de production")

if __name__ == "__main__":
    main()


