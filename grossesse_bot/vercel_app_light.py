"""
Application Vercel L√âG√àRE pour le chatbot de grossesse
Charge les mod√®les depuis des URLs externes pour respecter la limite de 250MB
"""

import os
import sys
import json
import requests
from io import BytesIO
from pathlib import Path

# Ajouter le r√©pertoire du projet au path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# Configuration Django pour Vercel
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'grossesse_bot.settings')

# Imports Django
import django
from django.http import JsonResponse, HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods

# Configuration Django
django.setup()

# Variables d'environnement pour les mod√®les externes
MODEL_URL = os.getenv('MODEL_URL', 'https://drive.google.com/uc?export=download&id=VOTRE_ID_GOOGLE_DRIVE')
LABEL_ENCODERS_URL = os.getenv('LABEL_ENCODERS_URL', 'https://drive.google.com/uc?export=download&id=VOTRE_ID_GOOGLE_DRIVE')

# Cache global pour les mod√®les
_model_cache = None
_label_encoders_cache = None

def load_model_from_url():
    """Charge le mod√®le depuis une URL externe"""
    global _model_cache
    
    if _model_cache is not None:
        return _model_cache
    
    try:
        print("üì• Chargement du mod√®le depuis l'URL externe...")
        response = requests.get(MODEL_URL, timeout=30)
        response.raise_for_status()
        
        # Charger le mod√®le avec joblib
        import joblib
        _model_cache = joblib.load(BytesIO(response.content))
        print("‚úÖ Mod√®le charg√© avec succ√®s")
        return _model_cache
        
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement du mod√®le : {e}")
        # Retourner un mod√®le factice pour √©viter les erreurs
        return create_dummy_model()

def load_label_encoders_from_url():
    """Charge les encodeurs depuis une URL externe"""
    global _label_encoders_cache
    
    if _label_encoders_cache is not None:
        return _label_encoders_cache
    
    try:
        print("üì• Chargement des encodeurs depuis l'URL externe...")
        response = requests.get(LABEL_ENCODERS_URL, timeout=30)
        response.raise_for_status()
        
        import joblib
        _label_encoders_cache = joblib.load(BytesIO(response.content))
        print("‚úÖ Encodeurs charg√©s avec succ√®s")
        return _label_encoders_cache
        
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement des encodeurs : {e}")
        return create_dummy_encoders()

def create_dummy_model():
    """Cr√©e un mod√®le factice pour √©viter les erreurs"""
    class DummyModel:
        def predict(self, X):
            # Retourner des pr√©dictions al√©atoires
            import random
            return [random.choice(['normal', 'mod√©r√©', '√©lev√©'])]
    
    return DummyModel()

def create_dummy_encoders():
    """Cr√©e des encodeurs factices"""
    return {}

def effectuer_prediction_light(data):
    """Version l√©g√®re de la pr√©diction"""
    try:
        # Charger le mod√®le
        model = load_model_from_url()
        
        # Mappings manuels bas√©s sur les encodages observ√©s
        mapping_activite = {
            'mod√©r√©e': 1,
            '√©lev√©e': 2,
            'faible': 0
        }

        mapping_regime = {
            'omnivore': 0,
            'v√©g√©tarien': 1,
            'autre': 2
        }

        mapping_antecedent = {
            'hypertension': 4,
            'diab√®te': 3,
            'asthme': 0,
            'aucun': 1,
            'autre': 2
        }

        mapping_symptome = {
            'douleur': 1,
            'fatigue': 2,
            'aucun': 0,
            'naus√©e': 3
        }

        # Encoder manuellement les variables cat√©gorielles
        activite = mapping_activite.get(data['activit√©'].lower(), 1)
        regime = mapping_regime.get(data['r√©gime'].lower(), 0)
        antecedent = mapping_antecedent.get(data['ant√©c√©dents'].lower(), 1)
        symptome = mapping_symptome.get(data['sympt√¥me'].lower(), 0)

        # Cr√©er l'entr√©e du mod√®le
        inputs = [
            data['age'],
            data['mois_grossesse'],
            data['poids_kg'],
            data['taille_cm'],
            activite,
            regime,
            antecedent,
            symptome,
        ]

        # Pr√©dire le risque
        prediction = model.predict([inputs])[0]

        # Conseil associ√©
        conseils = {
            "normal": "Votre grossesse est normale. Continuez une bonne alimentation et restez hydrat√©e.",
            "mod√©r√©": "Votre grossesse est √† risque mod√©r√©. Consultez un m√©decin deux fois par mois.",
            "√©lev√©": "Votre grossesse est √† risque √©lev√©. Suivi m√©dical renforc√© requis.",
        }

        return {
            "profil_risque": prediction,
            "conseil": conseils.get(prediction, "Aucun conseil disponible.")
        }

    except Exception as e:
        print(f"‚ùå Erreur lors de la pr√©diction : {e}")
        return {
            "profil_risque": "normal",
            "conseil": "Impossible d'√©valuer le risque. Consultez votre m√©decin."
        }

# Base de connaissances simplifi√©e
KNOWLEDGE_BASE = {
    "naus√©es": "Les naus√©es sont tr√®s courantes pendant la grossesse, surtout au 1er trimestre. Conseils : mangez de petits repas fr√©quents, √©vitez les odeurs fortes, buvez du th√© au gingembre.",
    "fatigue": "La fatigue est normale pendant la grossesse. Dormez 8-9h par nuit, faites des siestes si possible, mangez √©quilibr√©.",
    "alimentation": "Une alimentation √©quilibr√©e est essentielle : 5 fruits et l√©gumes par jour, prot√©ines, produits laitiers pasteuris√©s, c√©r√©ales compl√®tes. Prenez de l'acide folique.",
    "exercice": "L'exercice est b√©n√©fique : marche, natation, yoga pr√©natal. √âvitez les sports de contact. 30 minutes d'activit√© mod√©r√©e par jour.",
    "douleur": "Les douleurs abdominales peuvent √™tre normales (√©tirement des ligaments) ou n√©cessiter une consultation. Si intenses, consultez rapidement.",
    "b√©b√©": "Le d√©veloppement se fait progressivement : formation des organes au 1er trimestre, croissance au 2√®me, maturation au 3√®me.",
    "accouchement": "Signes du travail : contractions r√©guli√®res, perte du bouchon muqueux, rupture de la poche des eaux.",
    "sympt√¥mes": "De nombreux sympt√¥mes sont normaux : naus√©es, fatigue, seins tendus. Consultez si saignements, douleurs intenses, fi√®vre."
}

def find_best_match(user_input):
    """Trouve la meilleure correspondance dans la base de connaissances"""
    user_input = user_input.lower()
    
    keywords = {
        "naus√©es": ["naus√©e", "naus√©es", "vomissement", "mal au c≈ìur"],
        "fatigue": ["fatigue", "fatigu√©e", "√©puis√©e", "sommeil"],
        "alimentation": ["manger", "aliment", "nourriture", "r√©gime"],
        "exercice": ["sport", "exercice", "activit√©", "bouger"],
        "douleur": ["douleur", "mal", "souffrance", "ventre"],
        "b√©b√©": ["b√©b√©", "f≈ìtus", "enfant", "mouvements"],
        "accouchement": ["accouchement", "naissance", "travail"],
        "sympt√¥mes": ["sympt√¥me", "signe", "probl√®me"]
    }
    
    for topic, words in keywords.items():
        for word in words:
            if word in user_input:
                return topic
    
    return None

def process_message_simple(user_message):
    """Traitement simple des messages sans IA complexe"""
    user_message = user_message.lower()
    
    # Salutations
    if any(word in user_message for word in ['bonjour', 'salut', 'hello']):
        return {
            "response": "Bonjour ! Je suis votre assistant grossesse. Comment puis-je vous aider ?",
            "intention": "salutation"
        }
    
    # Remerciements
    if any(word in user_message for word in ['merci', 'thanks']):
        return {
            "response": "Je vous en prie ! N'h√©sitez pas si vous avez d'autres questions.",
            "intention": "remerciement"
        }
    
    # Au revoir
    if any(word in user_message for word in ['au revoir', 'bye', 'salut']):
        return {
            "response": "Au revoir ! Prenez soin de vous et de votre b√©b√©.",
            "intention": "au_revoir"
        }
    
    # Recherche dans la base de connaissances
    topic = find_best_match(user_message)
    if topic:
        return {
            "response": KNOWLEDGE_BASE[topic],
            "intention": "information"
        }
    
    # R√©ponse par d√©faut
    return {
        "response": "Je n'ai pas trouv√© d'information sp√©cifique sur votre question. Je peux vous aider avec : naus√©es, fatigue, alimentation, exercice, d√©veloppement du b√©b√©, accouchement. Pouvez-vous reformuler ?",
        "intention": "question_generale"
    }

@csrf_exempt
@require_http_methods(["POST"])
def chatbot_api(request):
    """API du chatbot pour Vercel (version l√©g√®re)"""
    try:
        # Parser le JSON
        data = json.loads(request.body)
        user_message = data.get('message', '')
        
        if not user_message:
            return JsonResponse({
                "response": "Je n'ai pas re√ßu votre message. Pouvez-vous r√©essayer ?",
                "error": "Message vide"
            }, status=400)
        
        # Traiter le message avec la version simple
        bot_response = process_message_simple(user_message)
        
        # Pr√©parer la r√©ponse finale
        response_data = {
            "response": bot_response['response'],
            "intention": bot_response.get('intention', 'unknown'),
            "is_emergency": False,  # Version simple
            "user_profile": {}
        }
        
        return JsonResponse(response_data)
        
    except json.JSONDecodeError:
        return JsonResponse({
            "response": "Format de message invalide. Envoyez un JSON avec une cl√© 'message'.",
            "error": "JSON invalide"
        }, status=400)
    except Exception as e:
        return JsonResponse({
            "response": "Je rencontre une difficult√© technique. Pouvez-vous reformuler votre question ?",
            "error": str(e)
        }, status=500)

@csrf_exempt
@require_http_methods(["POST"])
def predire_risque_api(request):
    """API de pr√©diction de risque pour Vercel (version l√©g√®re)"""
    try:
        data = json.loads(request.body)
        
        # Validation des donn√©es
        required_fields = ['age', 'mois_grossesse', 'poids_kg', 'taille_cm', 'activit√©', 'r√©gime', 'ant√©c√©dents', 'sympt√¥me']
        for field in required_fields:
            if field not in data:
                return JsonResponse({
                    "error": f"Champ manquant : {field}"
                }, status=400)
        
        # Effectuer la pr√©diction
        resultat = effectuer_prediction_light(data)
        
        return JsonResponse({
            "profil_risque": resultat['profil_risque'],
            "conseil": resultat['conseil']
        })
        
    except Exception as e:
        return JsonResponse({
            "error": str(e)
        }, status=500)

def health_check(request):
    """Point de terminaison de sant√© pour Vercel"""
    return JsonResponse({
        "status": "healthy",
        "service": "Chatbot Grossesse API (Version L√©g√®re)",
        "version": "2.0.0",
        "note": "Mod√®les charg√©s depuis URLs externes"
    })

def home(request):
    """Page d'accueil simple"""
    return HttpResponse("""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Chatbot Grossesse API - Version L√©g√®re</title>
        <meta charset="utf-8">
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: linear-gradient(135deg, #667eea, #764ba2); color: white; }
            .container { max-width: 800px; margin: 0 auto; }
            .endpoint { background: rgba(255,255,255,0.1); padding: 15px; margin: 10px 0; border-radius: 5px; }
            code { background: rgba(255,255,255,0.2); padding: 2px 5px; border-radius: 3px; }
            .warning { background: rgba(255,193,7,0.2); padding: 15px; border-radius: 5px; margin: 20px 0; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>ü§∞ Chatbot Grossesse API - Version L√©g√®re</h1>
            <p>API intelligente pour l'accompagnement des femmes enceintes</p>
            
            <div class="warning">
                <h3>‚ö†Ô∏è Version L√©g√®re</h3>
                <p>Cette version charge les mod√®les IA depuis des URLs externes pour respecter les limites de Vercel (250MB).</p>
            </div>
            
            <h2>üì° Endpoints disponibles</h2>
            
            <div class="endpoint">
                <h3>Chatbot API</h3>
                <p><strong>POST</strong> <code>/chatbot/api/</code></p>
                <p>Corps : <code>{"message": "Votre question"}</code></p>
            </div>
            
            <div class="endpoint">
                <h3>Pr√©diction de risque</h3>
                <p><strong>POST</strong> <code>/api/predire/</code></p>
                <p>Corps : <code>{"age": 30, "mois_grossesse": 6, "poids_kg": 70, "taille_cm": 165, "activit√©": "mod√©r√©e", "r√©gime": "omnivore", "ant√©c√©dents": "aucun", "sympt√¥me": "aucun"}</code></p>
            </div>
            
            <div class="endpoint">
                <h3>Sant√© de l'API</h3>
                <p><strong>GET</strong> <code>/health</code></p>
            </div>
            
            <h2>üîß Configuration requise</h2>
            <p>Configurez ces variables d'environnement dans Vercel :</p>
            <ul>
                <li><code>MODEL_URL</code> : URL de votre mod√®le .pkl</li>
                <li><code>LABEL_ENCODERS_URL</code> : URL de vos encodeurs .pkl</li>
            </ul>
            
            <h2>üìö Documentation</h2>
            <p>Consultez DEPLOY_VERCEL.md pour la configuration compl√®te.</p>
        </div>
    </body>
    </html>
    """)

# Mapping des routes pour Vercel
def handler(request, context):
    """Gestionnaire principal pour Vercel"""
    path = request.get('path', '/')
    method = request.get('method', 'GET')
    
    # Routes de l'API
    if path.startswith('/chatbot/api/') and method == 'POST':
        return chatbot_api(request)
    elif path.startswith('/api/predire/') and method == 'POST':
        return predire_risque_api(request)
    elif path == '/health' and method == 'GET':
        return health_check(request)
    elif path == '/' and method == 'GET':
        return home(request)
    else:
        return JsonResponse({
            "error": "Endpoint non trouv√©",
            "path": path,
            "method": method
        }, status=404)

# Pour le d√©veloppement local
if __name__ == "__main__":
    from django.core.management import execute_from_command_line
    execute_from_command_line(sys.argv)


