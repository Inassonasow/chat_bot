"""
Chatbot intelligent pour la grossesse
Utilise la base de connaissances et le processeur NLP pour r√©pondre √† toutes les questions
"""

import random
import json
from typing import Dict, List, Optional, Tuple
from .knowledge_base import GrossesseKnowledgeBase
from .nlp_processor import NLPProcessor

class IntelligentGrossesseChatbot:
    """Chatbot intelligent sp√©cialis√© dans la grossesse"""
    
    def __init__(self):
        self.knowledge_base = GrossesseKnowledgeBase()
        self.nlp_processor = NLPProcessor()
        
        # Historique de conversation pour le contexte
        self.conversation_history = []
        self.user_profile = {}
        
        # R√©ponses par d√©faut selon l'intention
        self.default_responses = {
            'salutation': [
                "Bonjour ! Je suis votre assistant sp√©cialis√© en grossesse. Comment puis-je vous aider aujourd'hui ?",
                "Salut ! Je suis l√† pour r√©pondre √† toutes vos questions sur la grossesse. Que souhaitez-vous savoir ?",
                "Bonjour ! En tant qu'expert en grossesse, je peux vous conseiller sur tous les aspects de cette p√©riode. Posez-moi vos questions !"
            ],
            'remerciement': [
                "Je vous en prie ! N'h√©sitez pas si vous avez d'autres questions.",
                "C'est avec plaisir ! Je suis l√† pour vous accompagner pendant votre grossesse.",
                "De rien ! Votre bien-√™tre et celui de votre b√©b√© sont importants."
            ],
            'au_revoir': [
                "Au revoir ! Prenez soin de vous et de votre b√©b√©. √Ä bient√¥t !",
                "√Ä bient√¥t ! N'h√©sitez pas √† revenir si vous avez des questions.",
                "Bonne journ√©e ! Je reste disponible pour vous accompagner."
            ]
        }
        
        # Conseils personnalis√©s par trimestre
        self.trimester_advice = {
            'premier_trimestre': {
                'general': "Au 1er trimestre, votre corps s'adapte. Les naus√©es et la fatigue sont normales.",
                'nutrition': "Prenez de l'acide folique et mangez √©quilibr√© malgr√© les naus√©es.",
                'precautions': "√âvitez l'alcool, le tabac et les m√©dicaments non prescrits."
            },
            'deuxieme_trimestre': {
                'general': "Le 2√®me trimestre est souvent le plus agr√©able. Vous devriez sentir les premiers mouvements.",
                'nutrition': "Augmentez vos apports en fer et calcium. Continuez une alimentation vari√©e.",
                'precautions': "Attention √† votre posture et √©vitez de dormir sur le dos."
            },
            'troisieme_trimestre': {
                'general': "Au 3√®me trimestre, pr√©parez-vous √† l'accouchement. Le b√©b√© grandit rapidement.",
                'nutrition': "Mangez de petits repas fr√©quents pour √©viter les reflux.",
                'precautions': "Surveillez les contractions et pr√©parez votre valise de maternit√©."
            }
        }
    
    def update_user_profile(self, extracted_info: Dict):
        """Met √† jour le profil utilisateur avec les nouvelles informations"""
        for key, value in extracted_info.items():
            if value is not None:
                self.user_profile[key] = value
    
    def get_personalized_greeting(self) -> str:
        """G√©n√®re une salutation personnalis√©e bas√©e sur le profil"""
        if 'semaines' in self.user_profile:
            weeks = self.user_profile['semaines']
            if weeks <= 12:
                trimester = "1er trimestre"
            elif weeks <= 28:
                trimester = "2√®me trimestre"
            else:
                trimester = "3√®me trimestre"
            
            return f"Bonjour ! Je vois que vous √™tes √† {weeks} semaines de grossesse ({trimester}). Comment vous sentez-vous aujourd'hui ?"
        
        return random.choice(self.default_responses['salutation'])
    
    def handle_emergency(self, message_analysis: Dict) -> str:
        """G√®re les messages d'urgence"""
        emergency_response = (
            "üö® ATTENTION : Votre message indique une situation qui pourrait n√©cessiter une consultation m√©dicale urgente.\n\n"
            "CONTACTEZ IMM√âDIATEMENT :\n"
            "‚Ä¢ Votre m√©decin ou sage-femme\n"
            "‚Ä¢ Les urgences maternit√© de votre h√¥pital\n"
            "‚Ä¢ Le 15 (SAMU) si c'est tr√®s urgent\n\n"
            "Signes d'urgence : saignements abondants, douleurs intenses, contractions r√©guli√®res avant terme, "
            "perte de liquide, fi√®vre √©lev√©e, maux de t√™te s√©v√®res avec troubles visuels.\n\n"
            "En attendant, reposez-vous et ne restez pas seule."
        )
        
        return emergency_response
    
    def handle_symptom_inquiry(self, message_analysis: Dict) -> str:
        """Traite les questions sur les sympt√¥mes"""
        medical_info = message_analysis.get('medical_info', {})
        pregnancy_stage = message_analysis.get('pregnancy_stage')
        
        if 'symptome' in medical_info:
            symptom = medical_info['symptome']
            
            # R√©ponse sp√©cialis√©e par sympt√¥me
            response = self.knowledge_base.get_response(symptom, message_analysis['cleaned_message'])
            
            if response:
                # Ajouter des conseils sp√©cifiques au trimestre si connu
                if pregnancy_stage and pregnancy_stage in self.trimester_advice:
                    advice = self.trimester_advice[pregnancy_stage]['general']
                    response += f"\n\n‚ÑπÔ∏è Au {pregnancy_stage.replace('_', ' ')}: {advice}"
                
                # Ajouter quand consulter
                response += "\n\n‚ö†Ô∏è Consultez votre m√©decin si les sympt√¥mes s'aggravent ou persistent."
                
                return response
        
        # R√©ponse g√©n√©rale sur les sympt√¥mes
        return ("Je comprends votre inqui√©tude concernant vos sympt√¥mes. "
               "Pouvez-vous me d√©crire plus pr√©cis√©ment ce que vous ressentez ? "
               "Par exemple : naus√©es, fatigue, douleurs, etc. "
               "Cela m'aidera √† vous donner des conseils plus adapt√©s.")
    
    def handle_general_question(self, message_analysis: Dict) -> str:
        """Traite les questions g√©n√©rales"""
        message = message_analysis['cleaned_message'].lower()
        
        # V√©rifier la FAQ d'abord
        faq_response = message_analysis.get('faq_match')
        if faq_response:
            return faq_response
        
        # Rechercher dans la base de connaissances
        topic = self.knowledge_base.find_best_match(message)
        if topic:
            response = self.knowledge_base.get_response(topic, message)
            if response:
                return response
        
        # Questions sp√©cifiques
        if any(word in message for word in ['combien', 'poids', 'kilos']):
            return ("Une prise de poids normale pendant la grossesse est de 9-12 kg pour un IMC normal. "
                   "Cela d√©pend de votre poids initial. Votre m√©decin vous donnera des recommandations personnalis√©es.")
        
        if any(word in message for word in ['quand', 'accouchement', 'naissance']):
            return ("L'accouchement a g√©n√©ralement lieu entre 37 et 42 semaines. "
                   "Signes du travail : contractions r√©guli√®res, perte du bouchon muqueux, rupture de la poche des eaux. "
                   "Chaque grossesse est unique !")
        
        if any(word in message for word in ['manger', 'alimentation', 'nourriture']):
            return self.knowledge_base.get_response('alimentation', message)
        
        if any(word in message for word in ['sport', 'exercice', 'activit√©']):
            return self.knowledge_base.get_response('exercice', message)
        
        # R√©ponse par d√©faut avec suggestions
        return ("Je n'ai pas trouv√© d'information sp√©cifique sur votre question, mais je peux vous aider avec :\n\n"
               "‚Ä¢ Sympt√¥mes de grossesse (naus√©es, fatigue, douleurs...)\n"
               "‚Ä¢ Alimentation et nutrition\n"
               "‚Ä¢ Exercice et activit√© physique\n"
               "‚Ä¢ D√©veloppement du b√©b√©\n"
               "‚Ä¢ Pr√©paration √† l'accouchement\n"
               "‚Ä¢ Signes d'alerte\n\n"
               "Pouvez-vous reformuler votre question ou choisir un de ces sujets ?")
    
    def handle_risk_evaluation(self, message_analysis: Dict) -> Dict:
        """Traite les demandes d'√©valuation de risque"""
        extracted_info = message_analysis['extracted_info']
        
        # V√©rifier si on a assez d'informations
        required_fields = ['age', 'semaines', 'poids', 'taille']
        missing_fields = [field for field in required_fields if field not in extracted_info]
        
        if missing_fields:
            questions = []
            if 'age' in missing_fields:
                questions.append("Quel √¢ge avez-vous ?")
            if 'semaines' in missing_fields:
                questions.append("√Ä combien de semaines de grossesse √™tes-vous ?")
            if 'poids' in missing_fields:
                questions.append("Quel est votre poids actuel ?")
            if 'taille' in missing_fields:
                questions.append("Quelle est votre taille ?")
            
            return {
                'response': f"Pour √©valuer votre profil de risque, j'ai besoin de quelques informations :\n\n" + 
                           "\n".join([f"‚Ä¢ {q}" for q in questions]),
                'needs_more_info': True,
                'missing_fields': missing_fields
            }
        
        # Si on a toutes les infos, pr√©parer pour l'√©valuation IA
        return {
            'response': "J'ai toutes les informations n√©cessaires. Voulez-vous que j'√©value votre profil de risque ?",
            'ready_for_prediction': True,
            'extracted_info': extracted_info
        }
    
    def add_empathy_and_support(self, response: str, sentiment: str) -> str:
        """Ajoute de l'empathie et du soutien √† la r√©ponse selon le sentiment"""
        if sentiment == 'negatif':
            empathy_phrases = [
                "Je comprends votre inqui√©tude. ",
                "C'est normal de se poser des questions. ",
                "Votre pr√©occupation est l√©gitime. ",
                "Je suis l√† pour vous rassurer. "
            ]
            response = random.choice(empathy_phrases) + response
            response += "\n\nüíù N'h√©sitez pas √† me poser d'autres questions. Vous n'√™tes pas seule dans cette aventure !"
        
        elif sentiment == 'positif':
            encouragement = [
                "\n\nüòä C'est merveilleux de voir votre enthousiasme !",
                "\n\nüåü Votre attitude positive est excellente pour vous et votre b√©b√© !",
                "\n\nüíï Continuez comme √ßa, vous √™tes sur la bonne voie !"
            ]
            response += random.choice(encouragement)
        
        return response
    
    def process_message(self, user_message: str) -> Dict[str, any]:
        """Traite un message utilisateur et g√©n√®re une r√©ponse compl√®te"""
        # Analyser le message avec NLP
        message_analysis = self.nlp_processor.process_message(user_message)
        
        # Mettre √† jour le profil utilisateur
        self.update_user_profile(message_analysis['extracted_info'])
        
        # Ajouter √† l'historique
        self.conversation_history.append({
            'user_message': user_message,
            'analysis': message_analysis,
            'timestamp': None  # √Ä ajouter si besoin
        })
        
        # Traiter selon l'intention
        intention = message_analysis['intention']
        response_data = {'needs_more_info': False, 'ready_for_prediction': False}
        
        # Priorit√© absolue aux urgences
        if message_analysis['is_emergency'] or intention == 'urgence':
            response = self.handle_emergency(message_analysis)
        
        elif intention == 'salutation':
            response = self.get_personalized_greeting()
        
        elif intention in ['remerciement', 'au_revoir']:
            response = random.choice(self.default_responses[intention])
        
        elif intention == 'symptome':
            response = self.handle_symptom_inquiry(message_analysis)
        
        elif intention == 'evaluation_risque':
            eval_result = self.handle_risk_evaluation(message_analysis)
            response = eval_result['response']
            response_data.update(eval_result)
        
        else:  # question_generale ou autres
            response = self.handle_general_question(message_analysis)
        
        # Ajouter empathie et soutien
        response = self.add_empathy_and_support(response, message_analysis['sentiment'])
        
        # Ajouter des questions de suivi si pertinentes
        if message_analysis['follow_up_questions'] and not message_analysis['is_emergency']:
            response += "\n\n" + "\n".join([f"‚ùì {q}" for q in message_analysis['follow_up_questions'][:2]])
        
        return {
            'response': response,
            'intention': intention,
            'sentiment': message_analysis['sentiment'],
            'is_emergency': message_analysis['is_emergency'],
            'user_profile': self.user_profile.copy(),
            **response_data
        }
    
    def get_conversation_summary(self) -> str:
        """G√©n√®re un r√©sum√© de la conversation"""
        if not self.conversation_history:
            return "Aucune conversation en cours."
        
        intentions = [msg['analysis']['intention'] for msg in self.conversation_history]
        most_common = max(set(intentions), key=intentions.count)
        
        summary = f"Conversation focalis√©e sur : {most_common}\n"
        summary += f"Profil utilisateur : {self.user_profile}\n"
        summary += f"Nombre de messages : {len(self.conversation_history)}"
        
        return summary
    
    def reset_conversation(self):
        """Remet √† z√©ro la conversation"""
        self.conversation_history = []
        self.user_profile = {}
    
    def get_health_tips(self) -> str:
        """Retourne des conseils de sant√© al√©atoires"""
        tips = [
            "üíß N'oubliez pas de boire 1,5-2L d'eau par jour !",
            "üö∂‚Äç‚ôÄÔ∏è Une marche de 30 minutes par jour est excellente pendant la grossesse.",
            "ü•¨ Mangez 5 fruits et l√©gumes par jour pour les vitamines.",
            "üò¥ Dormez sur le c√¥t√© gauche pour am√©liorer la circulation.",
            "üßò‚Äç‚ôÄÔ∏è Pratiquez la relaxation pour g√©rer le stress.",
            "üì± T√©l√©chargez une app pour suivre le d√©veloppement de b√©b√© !",
            "üë• Rejoignez un cours de pr√©paration √† l'accouchement.",
            "üìã Tenez un carnet de grossesse pour noter vos questions."
        ]
        
        return random.choice(tips)
